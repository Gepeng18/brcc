<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.baidu.brcc.dao.ProjectMapper">
  <resultMap id="BaseResultMap" type="com.baidu.brcc.domain.Project">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="product_id" jdbcType="BIGINT" property="productId" />
    <result column="memo" jdbcType="VARCHAR" property="memo" />
    <result column="project_type" jdbcType="TINYINT" property="projectType" />
    <result column="dependency_ids" jdbcType="VARCHAR" property="dependencyIds" />
    <result column="dependency_names" jdbcType="VARCHAR" property="dependencyNames" />
    <result column="mail_receiver" jdbcType="VARCHAR" property="mailReceiver" />
    <result column="api_password" jdbcType="VARCHAR" property="apiPassword" />
    <result column="api_token" jdbcType="VARCHAR" property="apiToken" />
    <result column="deleted" jdbcType="TINYINT" property="deleted" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.type == 0">
                  <choose>
                    <when test="criterion.noValue">
                      AND ${criterion.condition}
                    </when>
                    <when test="criterion.singleValue">
                      AND ${criterion.condition} #{criterion.value}
                    </when>
                    <when test="criterion.betweenValue">
                      AND ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                    </when>
                    <when test="criterion.listValue">
                      AND ${criterion.condition}
                      <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                        #{listItem}
                      </foreach>
                    </when>
                  </choose>
                </when>
                <when test="criterion.type == 1">
                  <trim prefix="(" prefixOverrides="OR" suffix=")">
                    <foreach collection="criterion.inlineOrCriteria" item="criterion">
                      <choose>
                        <when test="criterion.noValue">
                          OR ${criterion.condition}
                        </when>
                        <when test="criterion.singleValue">
                          OR ${criterion.condition} #{criterion.value}
                        </when>
                        <when test="criterion.betweenValue">
                          OR ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                        </when>
                        <when test="criterion.listValue">
                          OR ${criterion.condition}
                          <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                            #{listItem}
                          </foreach>
                        </when>
                      </choose>
                    </foreach>
                  </trim>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.type == 0">
                  <choose>
                    <when test="criterion.noValue">
                      AND ${criterion.condition}
                    </when>
                    <when test="criterion.singleValue">
                      AND ${criterion.condition} #{criterion.value}
                    </when>
                    <when test="criterion.betweenValue">
                      AND ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                    </when>
                    <when test="criterion.listValue">
                      AND ${criterion.condition}
                      <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                        #{listItem}
                      </foreach>
                    </when>
                  </choose>
                </when>
                <when test="criterion.type == 1">
                  <trim prefix="(" prefixOverrides="OR" suffix=")">
                    <foreach collection="criterion.inlineOrCriteria" item="criterion">
                      <choose>
                        <when test="criterion.noValue">
                          OR ${criterion.condition}
                        </when>
                        <when test="criterion.singleValue">
                          OR ${criterion.condition} #{criterion.value}
                        </when>
                        <when test="criterion.betweenValue">
                          OR ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                        </when>
                        <when test="criterion.listValue">
                          OR ${criterion.condition}
                          <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                            #{listItem}
                          </foreach>
                        </when>
                      </choose>
                    </foreach>
                  </trim>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, product_id, memo, project_type, dependency_ids, dependency_names, mail_receiver,
    api_password, api_token, deleted, update_time, create_time
  </sql>
  <select id="selectByExample" parameterType="com.baidu.brcc.domain.ProjectExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <if test="columns!=null and columns.size() &gt; 0">
      <foreach collection="columns" item="listItem" separator=",">
        ${listItem}
      </foreach>
    </if>
    <if test="columns==null or columns.size() &lt;= 0">
      <include refid="Base_Column_List" />
    </if>
    from rcc_project
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test='orderByClause == "`id` desc"'>
      order by id desc
    </if>
    <if test="limit != null and limit > 0">
       limit
      <if test="start != null and start > 0">
         #{start},
      </if>
       #{limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from rcc_project
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from rcc_project
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.baidu.brcc.domain.ProjectExample">
    delete from rcc_project
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.baidu.brcc.domain.Project">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into rcc_project (name, product_id, memo,
      project_type, dependency_ids, dependency_names,
      mail_receiver, api_password, api_token,
      deleted, update_time, create_time
      )
    values (#{name,jdbcType=VARCHAR}, #{productId,jdbcType=BIGINT}, #{memo,jdbcType=VARCHAR},
      #{projectType,jdbcType=TINYINT}, #{dependencyIds,jdbcType=VARCHAR}, #{dependencyNames,jdbcType=VARCHAR},
      #{mailReceiver,jdbcType=VARCHAR}, #{apiPassword,jdbcType=VARCHAR}, #{apiToken,jdbcType=VARCHAR},
      #{deleted,jdbcType=TINYINT}, #{updateTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.baidu.brcc.domain.Project">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into rcc_project
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="memo != null">
        memo,
      </if>
      <if test="projectType != null">
        project_type,
      </if>
      <if test="dependencyIds != null">
        dependency_ids,
      </if>
      <if test="dependencyNames != null">
        dependency_names,
      </if>
      <if test="mailReceiver != null">
        mail_receiver,
      </if>
      <if test="apiPassword != null">
        api_password,
      </if>
      <if test="apiToken != null">
        api_token,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=BIGINT},
      </if>
      <if test="memo != null">
        #{memo,jdbcType=VARCHAR},
      </if>
      <if test="projectType != null">
        #{projectType,jdbcType=TINYINT},
      </if>
      <if test="dependencyIds != null">
        #{dependencyIds,jdbcType=VARCHAR},
      </if>
      <if test="dependencyNames != null">
        #{dependencyNames,jdbcType=VARCHAR},
      </if>
      <if test="mailReceiver != null">
        #{mailReceiver,jdbcType=VARCHAR},
      </if>
      <if test="apiPassword != null">
        #{apiPassword,jdbcType=VARCHAR},
      </if>
      <if test="apiToken != null">
        #{apiToken,jdbcType=VARCHAR},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=TINYINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.baidu.brcc.domain.ProjectExample" resultType="java.lang.Long">
    select count(*) from rcc_project
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update rcc_project
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.productId != null">
        product_id = #{record.productId,jdbcType=BIGINT},
      </if>
      <if test="record.memo != null">
        memo = #{record.memo,jdbcType=VARCHAR},
      </if>
      <if test="record.projectType != null">
        project_type = #{record.projectType,jdbcType=TINYINT},
      </if>
      <if test="record.dependencyIds != null">
        dependency_ids = #{record.dependencyIds,jdbcType=VARCHAR},
      </if>
      <if test="record.dependencyNames != null">
        dependency_names = #{record.dependencyNames,jdbcType=VARCHAR},
      </if>
      <if test="record.mailReceiver != null">
        mail_receiver = #{record.mailReceiver,jdbcType=VARCHAR},
      </if>
      <if test="record.apiPassword != null">
        api_password = #{record.apiPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.apiToken != null">
        api_token = #{record.apiToken,jdbcType=VARCHAR},
      </if>
      <if test="record.deleted != null">
        deleted = #{record.deleted,jdbcType=TINYINT},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update rcc_project
    set id = #{record.id,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      product_id = #{record.productId,jdbcType=BIGINT},
      memo = #{record.memo,jdbcType=VARCHAR},
      project_type = #{record.projectType,jdbcType=TINYINT},
      dependency_ids = #{record.dependencyIds,jdbcType=VARCHAR},
      dependency_names = #{record.dependencyNames,jdbcType=VARCHAR},
      mail_receiver = #{record.mailReceiver,jdbcType=VARCHAR},
      api_password = #{record.apiPassword,jdbcType=VARCHAR},
      api_token = #{record.apiToken,jdbcType=VARCHAR},
      deleted = #{record.deleted,jdbcType=TINYINT},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.baidu.brcc.domain.Project">
    update rcc_project
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="productId != null">
        product_id = #{productId,jdbcType=BIGINT},
      </if>
      <if test="memo != null">
        memo = #{memo,jdbcType=VARCHAR},
      </if>
      <if test="projectType != null">
        project_type = #{projectType,jdbcType=TINYINT},
      </if>
      <if test="dependencyIds != null">
        dependency_ids = #{dependencyIds,jdbcType=VARCHAR},
      </if>
      <if test="dependencyNames != null">
        dependency_names = #{dependencyNames,jdbcType=VARCHAR},
      </if>
      <if test="mailReceiver != null">
        mail_receiver = #{mailReceiver,jdbcType=VARCHAR},
      </if>
      <if test="apiPassword != null">
        api_password = #{apiPassword,jdbcType=VARCHAR},
      </if>
      <if test="apiToken != null">
        api_token = #{apiToken,jdbcType=VARCHAR},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=TINYINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.baidu.brcc.domain.Project">
    update rcc_project
    set name = #{name,jdbcType=VARCHAR},
      product_id = #{productId,jdbcType=BIGINT},
      memo = #{memo,jdbcType=VARCHAR},
      project_type = #{projectType,jdbcType=TINYINT},
      dependency_ids = #{dependencyIds,jdbcType=VARCHAR},
      dependency_names = #{dependencyNames,jdbcType=VARCHAR},
      mail_receiver = #{mailReceiver,jdbcType=VARCHAR},
      api_password = #{apiPassword,jdbcType=VARCHAR},
      api_token = #{apiToken,jdbcType=VARCHAR},
      deleted = #{deleted,jdbcType=TINYINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>
