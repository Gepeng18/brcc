<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.baidu.brcc.dao.ApiTokenMapper">
  <resultMap id="BaseResultMap" type="com.baidu.brcc.domain.ApiToken">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="token" jdbcType="VARCHAR" property="token" />
    <result column="project_id" jdbcType="BIGINT" property="projectId" />
    <result column="project_name" jdbcType="VARCHAR" property="projectName" />
    <result column="expire_never" jdbcType="TINYINT" property="expireNever" />
    <result column="expire_time" jdbcType="TIMESTAMP" property="expireTime" />
    <result column="deleted" jdbcType="TINYINT" property="deleted" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.type == 0">
                  <choose>
                    <when test="criterion.noValue">
                      AND ${criterion.condition}
                    </when>
                    <when test="criterion.singleValue">
                      AND ${criterion.condition} #{criterion.value}
                    </when>
                    <when test="criterion.betweenValue">
                      AND ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                    </when>
                    <when test="criterion.listValue">
                      AND ${criterion.condition}
                      <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                        #{listItem}
                      </foreach>
                    </when>
                  </choose>
                </when>
                <when test="criterion.type == 1">
                  <trim prefix="(" prefixOverrides="OR" suffix=")">
                    <foreach collection="criterion.inlineOrCriteria" item="criterion">
                      <choose>
                        <when test="criterion.noValue">
                          OR ${criterion.condition}
                        </when>
                        <when test="criterion.singleValue">
                          OR ${criterion.condition} #{criterion.value}
                        </when>
                        <when test="criterion.betweenValue">
                          OR ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                        </when>
                        <when test="criterion.listValue">
                          OR ${criterion.condition}
                          <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                            #{listItem}
                          </foreach>
                        </when>
                      </choose>
                    </foreach>
                  </trim>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.type == 0">
                  <choose>
                    <when test="criterion.noValue">
                      AND ${criterion.condition}
                    </when>
                    <when test="criterion.singleValue">
                      AND ${criterion.condition} #{criterion.value}
                    </when>
                    <when test="criterion.betweenValue">
                      AND ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                    </when>
                    <when test="criterion.listValue">
                      AND ${criterion.condition}
                      <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                        #{listItem}
                      </foreach>
                    </when>
                  </choose>
                </when>
                <when test="criterion.type == 1">
                  <trim prefix="(" prefixOverrides="OR" suffix=")">
                    <foreach collection="criterion.inlineOrCriteria" item="criterion">
                      <choose>
                        <when test="criterion.noValue">
                          OR ${criterion.condition}
                        </when>
                        <when test="criterion.singleValue">
                          OR ${criterion.condition} #{criterion.value}
                        </when>
                        <when test="criterion.betweenValue">
                          OR ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                        </when>
                        <when test="criterion.listValue">
                          OR ${criterion.condition}
                          <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                            #{listItem}
                          </foreach>
                        </when>
                      </choose>
                    </foreach>
                  </trim>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, token, project_id, project_name, expire_never, expire_time, deleted, update_time,
    create_time
  </sql>
  <select id="selectByExample" parameterType="com.baidu.brcc.domain.ApiTokenExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <if test="columns!=null and columns.size() &gt; 0">
      <foreach collection="columns" item="listItem" separator=",">
        ${listItem}
      </foreach>
    </if>
    <if test="columns==null or columns.size() &lt;= 0">
      <include refid="Base_Column_List" />
    </if>
    from rcc_api_token
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test='orderByClause == "`id` desc"'>
      order by id desc
    </if>
    <if test="limit != null and limit > 0">
       limit
      <if test="start != null and start > 0">
         #{start},
      </if>
       #{limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from rcc_api_token
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from rcc_api_token
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.baidu.brcc.domain.ApiTokenExample">
    delete from rcc_api_token
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.baidu.brcc.domain.ApiToken">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into rcc_api_token (token, project_id, project_name,
      expire_never, expire_time, deleted,
      update_time, create_time)
    values (#{token,jdbcType=VARCHAR}, #{projectId,jdbcType=BIGINT}, #{projectName,jdbcType=VARCHAR},
      #{expireNever,jdbcType=TINYINT}, #{expireTime,jdbcType=TIMESTAMP}, #{deleted,jdbcType=TINYINT},
      #{updateTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.baidu.brcc.domain.ApiToken">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into rcc_api_token
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="token != null">
        token,
      </if>
      <if test="projectId != null">
        project_id,
      </if>
      <if test="projectName != null">
        project_name,
      </if>
      <if test="expireNever != null">
        expire_never,
      </if>
      <if test="expireTime != null">
        expire_time,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="token != null">
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=BIGINT},
      </if>
      <if test="projectName != null">
        #{projectName,jdbcType=VARCHAR},
      </if>
      <if test="expireNever != null">
        #{expireNever,jdbcType=TINYINT},
      </if>
      <if test="expireTime != null">
        #{expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=TINYINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.baidu.brcc.domain.ApiTokenExample" resultType="java.lang.Long">
    select count(*) from rcc_api_token
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update rcc_api_token
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.token != null">
        token = #{record.token,jdbcType=VARCHAR},
      </if>
      <if test="record.projectId != null">
        project_id = #{record.projectId,jdbcType=BIGINT},
      </if>
      <if test="record.projectName != null">
        project_name = #{record.projectName,jdbcType=VARCHAR},
      </if>
      <if test="record.expireNever != null">
        expire_never = #{record.expireNever,jdbcType=TINYINT},
      </if>
      <if test="record.expireTime != null">
        expire_time = #{record.expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deleted != null">
        deleted = #{record.deleted,jdbcType=TINYINT},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update rcc_api_token
    set id = #{record.id,jdbcType=BIGINT},
      token = #{record.token,jdbcType=VARCHAR},
      project_id = #{record.projectId,jdbcType=BIGINT},
      project_name = #{record.projectName,jdbcType=VARCHAR},
      expire_never = #{record.expireNever,jdbcType=TINYINT},
      expire_time = #{record.expireTime,jdbcType=TIMESTAMP},
      deleted = #{record.deleted,jdbcType=TINYINT},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.baidu.brcc.domain.ApiToken">
    update rcc_api_token
    <set>
      <if test="token != null">
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="projectId != null">
        project_id = #{projectId,jdbcType=BIGINT},
      </if>
      <if test="projectName != null">
        project_name = #{projectName,jdbcType=VARCHAR},
      </if>
      <if test="expireNever != null">
        expire_never = #{expireNever,jdbcType=TINYINT},
      </if>
      <if test="expireTime != null">
        expire_time = #{expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=TINYINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.baidu.brcc.domain.ApiToken">
    update rcc_api_token
    set token = #{token,jdbcType=VARCHAR},
      project_id = #{projectId,jdbcType=BIGINT},
      project_name = #{projectName,jdbcType=VARCHAR},
      expire_never = #{expireNever,jdbcType=TINYINT},
      expire_time = #{expireTime,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=TINYINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>
