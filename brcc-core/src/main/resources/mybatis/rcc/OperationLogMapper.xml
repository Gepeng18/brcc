<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.baidu.brcc.dao.OperationLogMapper">
  <resultMap id="BaseResultMap" type="com.baidu.brcc.domain.OperationLog">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="operator" jdbcType="VARCHAR" property="operator" />
    <result column="scene" jdbcType="VARCHAR" property="scene" />
    <result column="response" jdbcType="VARCHAR" property="response" />
    <result column="remote_address" jdbcType="VARCHAR" property="remoteAddress" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="request" jdbcType="LONGVARCHAR" property="request" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.baidu.brcc.domain.OperationLog">

  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.type == 0">
                  <choose>
                    <when test="criterion.noValue">
                      AND ${criterion.condition}
                    </when>
                    <when test="criterion.singleValue">
                      AND ${criterion.condition} #{criterion.value}
                    </when>
                    <when test="criterion.betweenValue">
                      AND ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                    </when>
                    <when test="criterion.listValue">
                      AND ${criterion.condition}
                      <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                        #{listItem}
                      </foreach>
                    </when>
                  </choose>
                </when>
                <when test="criterion.type == 1">
                  <trim prefix="(" prefixOverrides="OR" suffix=")">
                    <foreach collection="criterion.inlineOrCriteria" item="criterion">
                      <choose>
                        <when test="criterion.noValue">
                          OR ${criterion.condition}
                        </when>
                        <when test="criterion.singleValue">
                          OR ${criterion.condition} #{criterion.value}
                        </when>
                        <when test="criterion.betweenValue">
                          OR ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                        </when>
                        <when test="criterion.listValue">
                          OR ${criterion.condition}
                          <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                            #{listItem}
                          </foreach>
                        </when>
                      </choose>
                    </foreach>
                  </trim>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.type == 0">
                  <choose>
                    <when test="criterion.noValue">
                      AND ${criterion.condition}
                    </when>
                    <when test="criterion.singleValue">
                      AND ${criterion.condition} #{criterion.value}
                    </when>
                    <when test="criterion.betweenValue">
                      AND ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                    </when>
                    <when test="criterion.listValue">
                      AND ${criterion.condition}
                      <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                        #{listItem}
                      </foreach>
                    </when>
                  </choose>
                </when>
                <when test="criterion.type == 1">
                  <trim prefix="(" prefixOverrides="OR" suffix=")">
                    <foreach collection="criterion.inlineOrCriteria" item="criterion">
                      <choose>
                        <when test="criterion.noValue">
                          OR ${criterion.condition}
                        </when>
                        <when test="criterion.singleValue">
                          OR ${criterion.condition} #{criterion.value}
                        </when>
                        <when test="criterion.betweenValue">
                          OR ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                        </when>
                        <when test="criterion.listValue">
                          OR ${criterion.condition}
                          <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                            #{listItem}
                          </foreach>
                        </when>
                      </choose>
                    </foreach>
                  </trim>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, operator, scene, response, remote_address, create_time, request
  </sql>
  <sql id="Blob_Column_List">

  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.baidu.brcc.domain.OperationLogExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from rcc_operation_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null and limit > 0">
       limit
      <if test="start != null and start > 0">
         #{start},
      </if>
       #{limit}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.baidu.brcc.domain.OperationLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <if test="columns!=null and columns.size() &gt; 0">
      <foreach collection="columns" item="listItem" separator=",">
        ${listItem}
      </foreach>
    </if>
    <if test="columns==null or columns.size() &lt;= 0">
      <include refid="Base_Column_List" />
    </if>
    from rcc_operation_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test='orderByClause == "`id` desc"'>
      order by id desc
    </if>
    <if test="limit != null and limit > 0">
       limit
      <if test="start != null and start > 0">
         #{start},
      </if>
       #{limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from rcc_operation_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from rcc_operation_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.baidu.brcc.domain.OperationLogExample">
    delete from rcc_operation_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.baidu.brcc.domain.OperationLog">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into rcc_operation_log (user_id, operator, scene,
      response, remote_address, create_time,
      request)
    values (#{userId,jdbcType=BIGINT}, #{operator,jdbcType=VARCHAR}, #{scene,jdbcType=VARCHAR},
      #{response,jdbcType=VARCHAR}, #{remoteAddress,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
      #{request,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.baidu.brcc.domain.OperationLog">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into rcc_operation_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="operator != null">
        operator,
      </if>
      <if test="scene != null">
        scene,
      </if>
      <if test="response != null">
        response,
      </if>
      <if test="remoteAddress != null">
        remote_address,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="request != null">
        request,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="operator != null">
        #{operator,jdbcType=VARCHAR},
      </if>
      <if test="scene != null">
        #{scene,jdbcType=VARCHAR},
      </if>
      <if test="response != null">
        #{response,jdbcType=VARCHAR},
      </if>
      <if test="remoteAddress != null">
        #{remoteAddress,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="request != null">
        #{request,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.baidu.brcc.domain.OperationLogExample" resultType="java.lang.Long">
    select count(*) from rcc_operation_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update rcc_operation_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.operator != null">
        operator = #{record.operator,jdbcType=VARCHAR},
      </if>
      <if test="record.scene != null">
        scene = #{record.scene,jdbcType=VARCHAR},
      </if>
      <if test="record.response != null">
        response = #{record.response,jdbcType=VARCHAR},
      </if>
      <if test="record.remoteAddress != null">
        remote_address = #{record.remoteAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.request != null">
        request = #{record.request,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update rcc_operation_log
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      operator = #{record.operator,jdbcType=VARCHAR},
      scene = #{record.scene,jdbcType=VARCHAR},
      response = #{record.response,jdbcType=VARCHAR},
      remote_address = #{record.remoteAddress,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      request = #{record.request,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update rcc_operation_log
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      operator = #{record.operator,jdbcType=VARCHAR},
      scene = #{record.scene,jdbcType=VARCHAR},
      response = #{record.response,jdbcType=VARCHAR},
      remote_address = #{record.remoteAddress,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.baidu.brcc.domain.OperationLog">
    update rcc_operation_log
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="operator != null">
        operator = #{operator,jdbcType=VARCHAR},
      </if>
      <if test="scene != null">
        scene = #{scene,jdbcType=VARCHAR},
      </if>
      <if test="response != null">
        response = #{response,jdbcType=VARCHAR},
      </if>
      <if test="remoteAddress != null">
        remote_address = #{remoteAddress,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="request != null">
        request = #{request,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.baidu.brcc.domain.OperationLog">
    update rcc_operation_log
    set user_id = #{userId,jdbcType=BIGINT},
      operator = #{operator,jdbcType=VARCHAR},
      scene = #{scene,jdbcType=VARCHAR},
      response = #{response,jdbcType=VARCHAR},
      remote_address = #{remoteAddress,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      request = #{request,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.baidu.brcc.domain.OperationLog">
    update rcc_operation_log
    set user_id = #{userId,jdbcType=BIGINT},
      operator = #{operator,jdbcType=VARCHAR},
      scene = #{scene,jdbcType=VARCHAR},
      response = #{response,jdbcType=VARCHAR},
      remote_address = #{remoteAddress,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>
